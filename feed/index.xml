<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Mohammed I. Mukhtar</title>
	<atom:link href="https://triplem45.github.io/M.I.Mukhtat//feed/" rel="self" type="application/rss+xml" />
	<link>https://triplem45.github.io/M.I.Mukhtat/</link>
	<description>GIS Portfolio</description>
	<lastBuildDate>Mon, 23 Dec 2024 17:15:11 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.7.1</generator>

<image>
	<url>https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/9II7hq-LogoMakr-e1734941260861.png</url>
	<title>Mohammed I. Mukhtar</title>
	<link>https://triplem45.github.io/M.I.Mukhtat/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Creating a static Map using python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//creating-a-static-map-using-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//creating-a-static-map-using-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 23 Dec 2024 17:14:26 +0000</pubDate>
				<category><![CDATA[OSM]]></category>
		<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1405</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:48px;padding-right:5vw;padding-bottom:48px;padding-left:5vw"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(180deg,rgb(6,147,227) 31%,rgb(155,81,224) 31%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p class="has-text-align-center has-large-font-size">In this map I used data from Natueral Earth to create a simple map depicting the flood risk zones of Chari river in Chad</p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># setting the directory and the environment of the work 

import pathlib 
NOTEBOOK_PATH = pathlib.Path().resolve()
DATA_DIRECTORY = NOTEBOOK_PATH / &quot;data&quot;
OUTPUT_DIRECTORY = NOTEBOOK_PATH / &quot;docs&quot;

import geopandas as gpd
import matplotlib.pyplot as plt
import contextily </pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">#The data file is stored as a geojson file locally 
#read the data as pandas geodata frames 

Chad_rivers = gpd.read_file(
    DATA_DIRECTORY /  &quot;Chad_Rivers.geojson&quot; 
).to_crs(&quot;EPSG:3857&quot;)


Chad_Roads = gpd.read_file(
    DATA_DIRECTORY / &quot;Chad_Roads.geojson&quot;
).to_crs(&quot;EPSG:3857&quot;)

Flood = gpd.read_file(
    DATA_DIRECTORY / &quot;ChariFlood.geojson&quot;
).to_crs(&quot;EPSG:3857&quot;)

ChariRiver = gpd.read_file(
    DATA_DIRECTORY / &quot;ChariRiver.geojson&quot;
).to_crs(&quot;EPSG:3857&quot;)

Lake_Chad_Polygon = gpd.read_file(
    DATA_DIRECTORY / &quot;Lake_Chad_Polygon.geojson&quot; 
).to_crs(&quot;EPSG:3857&quot;)


PopChad = gpd.read_file(
    DATA_DIRECTORY / &quot;PopChad.geojson&quot;
).to_crs(&quot;EPSG:3857&quot;)</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Plorring the data (making a static map using matplotlib)


fig, ax = plt.subplots(figsize=(10, 10))

ChariRiver.plot(
    ax=ax,
    color=&quot;blue&quot;,
    linewidth=0.5
)

Flood.plot(
   column=&quot;level&quot;,
    scheme=&quot;quantiles&quot;,
    k=3,
    cmap=&quot;Spectral&quot;,
    legend=True,
    legend_kwds={
        &quot;title&quot;: &quot;Flood Risk Levels&quot;,
        &quot;labels&quot;: [&quot;High Risk&quot;, &quot;Medium Risk&quot;, &quot;Low Risk&quot;],
    },
    ax=ax
)

PopChad.plot(
    ax=ax,
    color=&quot;black&quot;,
    markersize=10
)

Lake_Chad_Polygon.plot(
    ax=ax,
    color=&quot;lightblue&quot;
)


ax.set_title(&quot;Flood Risk Analysis in N'Djamena&quot;)

contextily.add_basemap(
    ax, source= contextily.providers.Esri.NatGeoWorldMap,
    attribution = (
    &quot;Data Source: (c) Natural Earth, &quot;
    &quot;Map (c) Esri&quot;
    )
)

plt.savefig(OUTPUT_DIRECTORY / &quot;NDjemena Flood Risk Analysis.png&quot;, dpi=300, bbox_inches=&quot;tight&quot;)</pre></div>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="626" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis-626x1024.png" alt="" class="wp-image-908" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis-626x1024.png 626w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis-183x300.png 183w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis-768x1257.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis-939x1536.png 939w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis-1252x2048.png 1252w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/NDjemena-Flood-Risk-Analysis.png 1561w" sizes="(max-width: 626px) 100vw, 626px" /></figure>
</div></div>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//creating-a-static-map-using-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Calculate and visualise the dominance areas of shopping centres &#8211; Python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//calculate-and-visualise-the-dominance-areas-of-shopping-centres-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//calculate-and-visualise-the-dominance-areas-of-shopping-centres-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 23 Dec 2024 17:04:13 +0000</pubDate>
				<category><![CDATA[Data Analysis]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1402</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh;aspect-ratio:unset;"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(90deg,rgb(2,3,129) 47%,rgb(40,116,252) 47%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p class="has-text-align-center has-white-color has-text-color has-link-color has-medium-font-size wp-elements-fc6c23aae8a55540b5ad80202108e6e6">The aim is to delineate the dominance area of each shopping centre. </p>



<p>For this exercise, we define the ‘dominance area’ of a shopping centre as the area from which it can be reached faster than other shopping centres, using public transport travel times.</p>



<p>This task comprises of three major subtasks</p>



<ul class="wp-block-list">
<li class="has-white-color has-text-color has-link-color wp-elements-8fd6e85f0501ee6384ed47e221543d31">Loading the YKR grid and the individual travel time data sets and combining them into one geo data frame. </li>



<li class="has-white-color has-text-color has-link-color wp-elements-f6f76b3c97c9e93aee77a4c3920a3dfd">Finding the closest shopping centre to each grid cell. Using the minimum travel time to any of the shopping centres, </li>



<li class="has-white-color has-text-color has-link-color wp-elements-f7b057642d66274ab4b66d42f3dbc766">Visualising the dominance areas and travel times, using 2⨉1 subplots to plot the most dominant (closest) shopping centre for each grid cell, and the travel time to the closest shopping centre for each grid cell.</li>
</ul>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import pandas as pd
import geopandas as gpd
import mapclassify
import matplotlib.pyplot as plt

import pathlib 
NOTEBOOK_PATH = pathlib.Path().resolve()
DATA_DIRECTORY = NOTEBOOK_PATH / &quot;data&quot;</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">#Import the YKR grid and Set the &quot;YKR_ID&quot; column as index
grid = gpd.read_file(DATA_DIRECTORY / &quot;YKR_grid_EPSG3067.gpkg&quot;)
grid = grid.set_index(&quot;YKR_ID&quot;)</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Import the shpping centres data 
Itis = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5944003_Itis.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )


Myyrmanni = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5902043_Myyrmanni.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Jumbo = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5878070_Jumbo.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Dixii = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5878087_Dixi.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Forum = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5975373_Forum.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Iso_Omena = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5978593_Iso_Omena.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Ruoholahti = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5980260_Ruoholahti.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Join data and add suffix name to doupled column names
all_data = Itis.add_suffix(&quot;_Itis&quot;).join(
    Myyrmanni.add_suffix(&quot;_Myyrmanni&quot;)
).join(Jumbo.add_suffix(&quot;_Jumbo&quot;)
      ).join(
    Dixii.add_suffix(&quot;_Dixii&quot;)
).join(
    Forum.add_suffix(&quot;_Forum&quot;)
).join(
    Iso_Omena.add_suffix(&quot;_Iso_Omena&quot;)
).join(
    Ruoholahti.add_suffix(&quot;_Ruoholahti&quot;)
)
grid = grid.join(all_data)
</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">grid[&quot;min_tr_t&quot;] = grid[[&quot;pt_r_t_Itis&quot;, &quot;pt_r_t_Myyrmanni&quot;, &quot;pt_r_t_Jumbo&quot;, &quot;pt_r_t_Dixii&quot;, &quot;pt_r_t_Forum&quot;, &quot;pt_r_t_Iso_Omena&quot;, &quot;pt_r_t_Ruoholahti&quot;]].min(axis=1)
grid[&quot;closest_ShoppingCentre&quot;] = grid[[&quot;pt_r_t_Itis&quot;, &quot;pt_r_t_Myyrmanni&quot;, &quot;pt_r_t_Jumbo&quot;, &quot;pt_r_t_Dixii&quot;, &quot;pt_r_t_Forum&quot;, &quot;pt_r_t_Iso_Omena&quot;, &quot;pt_r_t_Ruoholahti&quot;]].idxmin(axis=1).astype(str)

grid[&quot;closest_ShoppingCentre&quot;] = grid[&quot;closest_ShoppingCentre&quot;].apply(
    lambda value : value[7:]
)</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 15), facecolor=&quot;lightgrey&quot;)


ax1.set_title(&quot;Areas of dominance of shopping centres&quot;)
ax2.set_title(&quot;Travel time to the closest shopping centre&quot;)

grid.plot(
    column=&quot;closest_ShoppingCentre&quot;,
    ax=ax1,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0,
    legend=True
)

grid.plot(
    column=&quot;min_tr_t&quot;,
    ax=ax2,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

plt.savefig(DATA_DIRECTORY / &quot;dominance_areas.png&quot;)</pre></div>



<figure class="wp-block-image size-full"><img decoding="async" width="1000" height="500" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px.png" alt="" class="wp-image-1403" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px.png 1000w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px-300x150.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px-768x384.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure>
</div></div>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//calculate-and-visualise-the-dominance-areas-of-shopping-centres-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Joining accessibility datasets into a grid and visualising the data on a map using Python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//joining-accessibility-datasets-into-a-grid-and-visualising-the-data-on-a-map-using-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//joining-accessibility-datasets-into-a-grid-and-visualising-the-data-on-a-map-using-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 09 Dec 2024 16:51:03 +0000</pubDate>
				<category><![CDATA[Data Analysis]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1392</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(180deg,rgb(21,87,153) 0%,rgb(21,153,87) 100%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p>This exercise, part of the Master&#8217;s in GIS curriculum at the University of Helsinki, combines non-spatial data (travel times) with spatial data (grid cells representing locations) to visualize travel times to two shopping centers within the Helsinki metropolitan area. The goal is to integrate these datasets and generate a map showing travel times from every location in the grid to each shopping center.</p>



<p>In particular, this task comprises of three major steps:</p>



<ul class="wp-block-list">
<li class="has-white-color has-text-color has-link-color wp-elements-cf90ddb50ad04afafed638711d23d96c">Reading the grid cell data set</li>



<li class="has-white-color has-text-color has-link-color wp-elements-c2339dd58cb79bc00759ffc577f06461">Reading travel time data set,</li>



<li class="has-white-color has-text-color has-link-color wp-elements-d4a1a17a1967c3482bdb1281c2d43180">Classifying the travel times for both travel modes (public transport and private car) into five-minute intervals</li>
</ul>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-193b485d305cba77607ddc07f7a095ae">1. <strong>Reading the grid cell data set</strong></h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import pathlib 
NOTEBOOK_PATH = pathlib.Path().resolve()
DATA_DIRECTORY = NOTEBOOK_PATH / &quot;data&quot;

import pandas as pd
import geopandas as gpd</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">grid = gpd.read_file(DATA_DIRECTORY / &quot;YKR_grid_EPSG3067.gpkg&quot;)
grid = grid.set_index(&quot;YKR_ID&quot;)
grid.head()</pre></div>



<figure class="wp-block-image size-full"><img decoding="async" width="921" height="220" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13.png" alt="" class="wp-image-1396" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13.png 921w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13-300x72.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13-768x183.png 768w" sizes="(max-width: 921px) 100vw, 921px" /></figure>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-1dd0e94a79fb67a636eb57c50fc6f3bc">2. Reading the travel time data sets and join them to the grid cells </h2>



<p>Inside the&nbsp;data&nbsp;directory, a set of semicolon-separated text files with travel times to each of a set of shopping centres in the Helsinki region</p>



<p>The individual files have file names following the schema&nbsp;travel_times_to_[XXXXX]_[Shopping_Centre], where&nbsp;[Shopping_Centre]&nbsp;is the name of one of the seven shopping centres included in the data set, and&nbsp;[XXXXX], coincidently, referring to the YKR grid cell in which the shopping centre is located</p>



<p>The data sets contain computed travel times between different places in the metropolitan area. In order to produce such a&nbsp;<em>travel time matrix</em>, all connections from all origins to all destinations are calculated, and then recorded in a table.</p>



<p><strong>Columns</strong></p>



<p>The data sets we use have many&nbsp;<strong>columns</strong>, but only a few are interesting for this task:</p>



<ul class="wp-block-list">
<li class="has-white-color has-text-color has-link-color wp-elements-2b26e1708931dc0787d918eaa8c0793f">from_id: the YKR_ID of the <em>origin</em> grid cell</li>



<li class="has-white-color has-text-color has-link-color wp-elements-0a8925baf206f347d5b2fce4c6140540">to_id: refers to the YKR_ID of the <em>destination</em> grid cell (here: the one containing the shopping centre).</li>



<li class="has-white-color has-text-color has-link-color wp-elements-5c31f15c6fd6e253129af7cd251e8091">pt_r_t: how long does it take to travel from from_id to to_id, in minutes, using public transport</li>



<li class="has-white-color has-text-color has-link-color wp-elements-e57d582fba15a78abd9bc37341af8454">car_r_t: how long does it take to drive a car from from_id to to_id, in minutes</li>
</ul>



<p class="has-black-color has-text-color has-link-color wp-elements-809841e9a6bc832d5d295f2558c9168a"><strong>The next code is to read the data sets for the shopping centres ‘Itis’ and ‘Myyrmanni’, discard irrelevant columns, rename the pt_r_t and car_r_t columns to include a reference to the shopping centre (e.g., into pt_r_t_Itis), and join the renamed columns to the grid data frame. Don’t forget to replace no-data values (-1) with None</strong></p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">Itis = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5944003_Itis.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;, &quot;car_r_t&quot;],
    index_col=&quot;from_id&quot;
    ).rename(columns={&quot;pt_r_t&quot;:&quot;pt_r_t_Itis&quot;, &quot;car_r_t&quot;:&quot;car_r_t_Itis&quot;, &quot;to_id&quot;:&quot;to_id_Itis&quot;})


Myyrmanni = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5902043_Myyrmanni.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;, &quot;car_r_t&quot;],
    index_col=&quot;from_id&quot;
    )</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">grid = grid.join(Itis).join(Myyrmanni.add_suffix(&quot;_Myyrmanni&quot;))
grid.head()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="928" height="300" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14.png" alt="" class="wp-image-1397" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14.png 928w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14-300x97.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14-768x248.png 768w" sizes="(max-width: 928px) 100vw, 928px" /></figure>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-5341f3df6d13c47a2375791619d9cefe">3. Classifying the travel times into five-minute intervals</h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import mapclassify
&quot;&quot;&quot;
Create a mapclassify.UserDefined classifier, using these class breaks:
                                        5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60
&quot;&quot;&quot;
bins =[5, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0]
# for Itis
classifier1 = mapclassify.UserDefined(
    y=grid[&quot;pt_r_t_Itis&quot;], 
    bins=bins
)

# for Myyrmanni
classifier2 = mapclassify.UserDefined(
    y=grid[&quot;car_r_t_Myyrmanni&quot;], 
    bins=bins
)

classifier3 = mapclassify.UserDefined(
    y=grid[&quot;car_r_t_Itis&quot;], 
    bins=bins
)

classifier4 = mapclassify.UserDefined(
    y=grid[&quot;pt_r_t_Myyrmanni&quot;], 
    bins=bins
)

&quot;&quot;&quot;
Apply the classifier to pt_r_t_[ShoppingCentre] and car_r_t_[ShoppingCentre] columns, 
and store the results to pt_r_t_cl_[ShoppingCentre] and car_r_t_cl_[ShoppingCentre] columns, respectively
&quot;&quot;&quot;

#yb: Short for “yielded bins,” this attribute contains the class index for each data value
grid[&quot;pt_r_t_cl_Itis&quot;] =  classifier1.yb

grid[&quot;car_r_t_cl_Myyrmanni&quot;] = classifier2.yb

grid[&quot;car_r_t_cl_Itis&quot;] =  classifier3.yb

grid[&quot;pt_r_t_cl_Myyrmanni&quot;] =  classifier4.yb</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Check the output for Itis
print(&quot;travel times by public transport:&quot;)
grid[['pt_r_t_Itis', 'pt_r_t_cl_Itis']].head()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="921" height="231" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15.png" alt="" class="wp-image-1398" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15.png 921w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15-300x75.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15-768x193.png 768w" sizes="(max-width: 921px) 100vw, 921px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Check the output for Myyrmanni
print(&quot;Travel times by car:&quot;)
grid[[&quot;car_r_t_Myyrmanni&quot;, &quot;car_r_t_cl_Myyrmanni&quot;]].head()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="925" height="240" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16.png" alt="" class="wp-image-1399" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16.png 925w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16-300x78.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16-768x199.png 768w" sizes="(max-width: 925px) 100vw, 925px" /></figure>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-44d9283c68059f61d417bf5b76e9d64e">4. Ploting the classified travel times</h2>



<p>Creating a 2⨉2 plot, to plot the <em>classified</em> travel times by public transport (left) and by car (right), to Itis (top) and Myyrmanni (bottom)</p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import matplotlib.pyplot as plt

# Creating subplots using matplotlib.pyplot.subplots(), 
#with 2 rows and 2 columns. Increase the figure size to 10⨉10&quot;
fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))

#title
fig.suptitle('Travel times by public transport (PT) and car to Itis and Myyrmanni')

# Defining variables to more easily refer to individual axes
ax11 = axs[0][0]
ax12 = axs[0][1]
ax21 = axs[1][0]
ax22 = axs[1][1]

#Adding appropriate titles for the subplots
ax11.set_title(&quot;Itis - Travel time by PT&quot;)
ax12.set_title(&quot;Itis - Travel time by Car&quot;)
ax21.set_title(&quot;Myyrmanni - Travel time by PT&quot;)   
ax22.set_title(&quot;Myyrmanni - Travel time by Car&quot;)

# Set plot line width
line_width = 1.5

# Plot data
grid.plot(
    column=&quot;pt_r_t_cl_Itis&quot;,
    ax=ax11,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

grid.plot(
    column=&quot;car_r_t_cl_Itis&quot;,
    ax=ax12,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

grid.plot(
    column=&quot;pt_r_t_cl_Myyrmanni&quot;,
    ax=ax21,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

grid.plot(
    column=&quot;car_r_t_cl_Myyrmanni&quot;,
    ax=ax22,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)
#Saving the figure to a file called shopping_centre_accessibility.png in the DATA_DIRECTORY
plt.savefig(DATA_DIRECTORY / &quot;shopping_centre_accessibility.png&quot;)</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="720" height="720" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px.png" alt="" class="wp-image-1400" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px.png 720w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px-300x300.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px-150x150.png 150w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px-600x600.png 600w" sizes="(max-width: 720px) 100vw, 720px" /></figure>
</div></div>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//joining-accessibility-datasets-into-a-grid-and-visualising-the-data-on-a-map-using-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Geospatial data manipulation with Python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//geospatial-data-manipulation-with-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//geospatial-data-manipulation-with-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 18 Nov 2024 11:33:28 +0000</pubDate>
				<category><![CDATA[OSM]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<category><![CDATA[Spatial Analysis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1070</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex">
<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="760" data-id="902" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-1024x760.png" alt="" class="wp-image-902" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-1024x760.png 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-300x223.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-768x570.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-1536x1140.png 1536w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-2048x1521.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="906" height="1024" data-id="900" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-906x1024.png" alt="" class="wp-image-900" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-906x1024.png 906w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-265x300.png 265w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-768x868.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-1358x1536.png 1358w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany.png 1804w" sizes="(max-width: 906px) 100vw, 906px" /></figure>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="796" height="798" data-id="899" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code.png" alt="" class="wp-image-899" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code.png 796w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code-300x300.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code-150x150.png 150w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code-768x770.png 768w" sizes="(max-width: 796px) 100vw, 796px" /><figcaption class="wp-element-caption">The python code</figcaption></figure>
</figure>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//geospatial-data-manipulation-with-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title> Seasonal Weather Anomalies of Using Pandas</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//seasonal-weather-anomalies-of-using-pandas-sodankyla-weather-station-in-northern-finland/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//seasonal-weather-anomalies-of-using-pandas-sodankyla-weather-station-in-northern-finland/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 11 Nov 2024 06:15:27 +0000</pubDate>
				<category><![CDATA[Data Analysis]]></category>
		<category><![CDATA[Environmental Monitoring]]></category>
		<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1246</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<p></p>



<p></p>



<div class="wp-block-cover alignfull is-light" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim" style="background-color:#e68b14"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p class="has-text-align-center has-x-large-font-size" style="font-style:italic;font-weight:1000;text-transform:uppercase"><strong>The goal</strong></p>



<p>This exercise is part of the Geo-python course at the University of Helsinki, Finland.</p>



<p>The purpose is &nbsp;to create a four-panel plot showing the seasonal temperature anomalies for winter, spring, summer, and autumn for the years 1909-2019</p>



<p>The&nbsp;raw data&nbsp;contains daily temperature data from Sodankylä, in northern Finland, from January 1908 to October 2020. The data was downloaded from the&nbsp;<a href="https://www.ncdc.noaa.gov/cdo-web/datasets#GHCND">NOAA Global Historical Climate Network database</a>&nbsp;as a text file. </p>



<p class="has-black-color has-text-color has-link-color wp-elements-b07e55a758387a7b85df35616d54cbdf" style="font-size:20px"><strong>Adding the pandas and matplotlib libraries</strong></p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import pandas as pd
pd.options.mode.copy_on_write = True
import matplotlib.pyplot as plt</pre></div>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p class="has-black-color has-text-color has-link-color wp-elements-fb349871be7fb4dc647dbc257903d76d" style="font-size:20px"><strong>1. Reading the provided data file using pandas and converting missing values to NA.</strong></p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Assign the file path to a varible fp
fp = r&quot;data/2315676.txt&quot;

# Read the data file as pandas DataFrame

data =pd.read_csv(
    fp,
    usecols= [&quot;DATE&quot;, &quot;TAVG&quot;, &quot;TMAX&quot;, &quot;TMIN&quot;],
    skiprows=[1],
    na_values=-9999,
    sep='\s+',
    parse_dates = [&quot;DATE&quot;],   
)</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="958" height="681" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-2.png" alt="" class="wp-image-1262" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-2.png 958w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-2-300x213.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-2-768x546.png 768w" sizes="(max-width: 958px) 100vw, 958px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<p style="font-size:20px"><strong>2. Filling in the missing values in the <code>TAVG</code> column with estimates of the average daily temperature, and dropping any average daily temperatures that are still missing.</strong></p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Creating a new column to store values where the TAVG is missing using TMAX and TMIN

data[&quot;TEMP_F&quot;] = 0.0

&quot;&quot;&quot; To find and replace the rows where TAVG is NaN 
    and Both TMAX and TMIN are not NaN with the average of TMAX and TMIN &quot;&quot;&quot;

data.loc[(data[&quot;TAVG&quot;].isna()) &amp; (data[&quot;TMAX&quot;].notna()) &amp; (data[&quot;TMAX&quot;].notna()), &quot;TEMP_F&quot;] = (data[&quot;TMAX&quot;] + data[&quot;TMIN&quot;]) / 2

# And for rows where TAVG is not NaN, add the TAVG to the TEMP column

data.loc[data[&quot;TAVG&quot;].notna(), &quot;TEMP_F&quot;] = data[&quot;TAVG&quot;]</pre></div>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Test if there are still NaN values in the TEMP column
data[&quot;TEMP_F&quot;].hasnans</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="962" height="46" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-1.png" alt="" class="wp-image-1260" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-1.png 962w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-1-300x14.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-1-768x37.png 768w" sizes="(max-width: 962px) 100vw, 962px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># and The number of NaN values
NaN_values = data[&quot;TEMP_F&quot;].isna().sum()
print(NaN_values)</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="965" height="45" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-3.png" alt="" class="wp-image-1263" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-3.png 965w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-3-300x14.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-3-768x36.png 768w" sizes="(max-width: 965px) 100vw, 965px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Using the dropna() function and the subset parameter to to process the NaN values by the TEMP_F column 
data = data.dropna(subset=[&quot;TEMP_F&quot;])</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">#chec again if there are any NaN left
data[&quot;TEMP_F&quot;].hasnans</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="959" height="57" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-4.png" alt="" class="wp-image-1264" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-4.png 959w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-4-300x18.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-4-768x46.png 768w" sizes="(max-width: 959px) 100vw, 959px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>
</div></div>



<div class="wp-block-cover alignfull is-light" style="margin-top:0;padding-top:48px;padding-right:5vw;padding-bottom:48px;padding-left:5vw"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(180deg,rgb(0,0,0) 39%,rgb(83,80,123) 39%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<div style="height:0px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading has-white-color has-text-color has-link-color wp-elements-b65d53a88c2ae4cdf3227fba53fde332" style="font-size:20px">3. <strong>Defining a function to convert temperatures in Fahrenheit to Celsius.</strong></h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">def far_to_cel(tempF):
    &quot;&quot;&quot;Function to convert Fahrenheit to Celsius.

    Parameters
    ----------

    tempF: int | float
        Input temperature in Fahrenheit (should be a number)

    Returns
    -------

    Temperature in Celsius (float)
    &quot;&quot;&quot;

    # Convert the Fahrenheit into Celsius
    tempC = (tempF - 32) / 1.8

    return tempC</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Creating a new Column TEMP_C to store the temperature in Celsius degree
data[&quot;TEMP_C&quot;] = 0.0

# Assigning the converted value to the column 
#by calculating it from the TEMP_F column using the created function
data[&quot;TEMP_C&quot;] = data[&quot;TEMP_F&quot;].apply(far_to_cel)</pre></div>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<h4 class="wp-block-heading has-white-color has-text-color has-link-color has-medium-font-size wp-elements-673d5a8f87fadf2d00ec5aff07ba4f4f" id="4.-Calculate-seasonal-average-temperatures-for-each-season-in-every-year-(e.g.,-Winter-1909,-Spring-1909,-Summer-1909,-...)"><strong>4. Calculate seasonal average temperatures for each season in every year (e.g., Winter 1909, Spring 1909, Summer 1909, &#8230;)</strong></h4>



<p class="has-white-color has-text-color has-link-color wp-elements-f413521f54c3a83c94ee588fd259fa5b">             The seasons should include the following months: </p>



<p class="has-white-color has-text-color has-link-color wp-elements-da4a346001b6e9cb757eedfdd86d5408">                            Winter: December, January, February<br>                            Spring: March, April, May<br>                           Summer: June. July, August<br>                           Autumn: September, October, November</p>



<p><a href="http://localhost:8888/lab/tree/Geo-PythonCourse-UniversityofHelsinki/python-environments/my-wrok/exercise/final-exercise-triplem45/seasonal-weather-anomalies.ipynb#4.-Calculate-seasonal-average-temperatures-for-each-season-in-every-year-(e.g.,-Winter-1909,-Spring-1909,-Summer-1909,-...)"></a></p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">&quot;&quot;&quot;
We will create a new column MONTHS that we will store the months 
by grabbing it from the DATE column,
later we will use this column to group the data by the Season and calculate it is mean
&quot;&quot;&quot;
# Parse the Month temporal components from DATE to column MONTH
data[&quot;MONTH&quot;] = data[&quot;DATE&quot;].dt.month
# and for Year 
data[&quot;YEAR&quot;] = data[&quot;DATE&quot;].dt.year
data[&quot;SEASON&quot;] = pd.Series(dtype=&quot;string&quot;)</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Classifying the data according to te month it was quired to Winter, Spring, Summer and Autumn

# Monthes 12, 1, and 2 is Winter
data.loc[(data[&quot;MONTH&quot;] == 12) | (data[&quot;MONTH&quot;] &lt; 3), &quot;SEASON&quot;] = &quot;Winter&quot;

# Monthes 3 to 5 is Spring
data.loc[(data[&quot;MONTH&quot;] &gt;= 3) &amp; (data[&quot;MONTH&quot;] &lt; 6), &quot;SEASON&quot;] = &quot;Spring&quot;

# Monthes 6 to 8 is Summer
data.loc[(data[&quot;MONTH&quot;] &gt;= 6) &amp; (data[&quot;MONTH&quot;] &lt; 9), &quot;SEASON&quot;] = &quot;Summer&quot;

# Monthes 9 to 11 is Autumn
data.loc[(data[&quot;MONTH&quot;] &gt;= 9) &amp; (data[&quot;MONTH&quot;] &lt; 12), &quot;SEASON&quot;] = &quot;Autumn&quot;</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># making sure different 4 values are stores
data[&quot;SEASON&quot;].unique()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="954" height="112" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-5.png" alt="" class="wp-image-1265" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-5.png 954w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-5-300x35.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-5-768x90.png 768w" sizes="(max-width: 954px) 100vw, 954px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">YearlySeason = data.groupby(
  	[&quot;YEAR&quot;, &quot;SEASON&quot;])[&quot;TEMP_C&quot;].mean().reset_index().rename(columns={&quot;TEMP_C&quot; : &quot;TEMP_YearlyS&quot;}
)

YearlySeason</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="960" height="690" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-6.png" alt="" class="wp-image-1266" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-6.png 960w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-6-300x216.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-6-768x552.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-4539e98f97c0a2aa6254abb7d0397ad0" style="font-size:20px">5. Calculate seasonal average temperatures for the reference period 1951-1980 (e.g., 4 values in total, one for each season).</h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">&quot;&quot;&quot; Grouping every data to the season it was recorded on &quot;&quot;&quot;
# Selecting the data for the period between 1951 and 198
selected = data.loc[(data[&quot;YEAR&quot;] &gt;= 1951) &amp; (data[&quot;YEAR&quot;] &lt;= 1980)]

grouped51_80 = selected.groupby(&quot;SEASON&quot;)[&quot;TEMP_C&quot;].mean().reset_index().rename(columns={&quot;TEMP_C&quot;: &quot;TEMP_AvSe&quot;})
grouped51_80</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="961" height="284" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-7.png" alt="" class="wp-image-1267" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-7.png 961w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-7-300x89.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-7-768x227.png 768w" sizes="(max-width: 961px) 100vw, 961px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">for season, temp in zip(grouped51_80[&quot;SEASON&quot;], grouped51_80[&quot;TEMP_AvSe&quot;]):
    print(f&quot; The average seasonal temerature for {season} was {temp:.2f} °C&quot;)</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="959" height="128" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-8.png" alt="" class="wp-image-1268" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-8.png 959w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-8-300x40.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-8-768x103.png 768w" sizes="(max-width: 959px) 100vw, 959px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">&quot;&quot;&quot; Calculating the mean temperature for the 4 seasons of the whole period &quot;&quot;&quot;
# For winter
Winter_average = data[&quot;TEMP_C&quot;].loc[data[&quot;SEASON&quot;] == &quot;Winter&quot;].mean()
print(f&quot;The mean temperature for winter season for the recorded period is {Winter_average.round(2)} °C.&quot;)

# For Spring
Spring_average = data[&quot;TEMP_C&quot;].loc[data[&quot;SEASON&quot;] == &quot;Spring&quot;].mean()
print(f&quot;The mean temperature for Spring season for the recorded period is {Spring_average.round(2)} °C.&quot;)

# For Summer
Summer_average = data[&quot;TEMP_C&quot;].loc[data[&quot;SEASON&quot;] == &quot;Summer&quot;].mean()
print(f&quot;The mean temperature for Summer season for the recorded period is {Summer_average.round(2)} °C.&quot;)

# For Autumn
Autumn_average = data[&quot;TEMP_C&quot;].loc[data[&quot;SEASON&quot;] == &quot;Autumn&quot;].mean()
print(f&quot;The mean temperature for Autumn season for the recorded period is {Autumn_average.round(2)} °C.&quot;)
</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="969" height="123" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-9.png" alt="" class="wp-image-1269" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-9.png 969w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-9-300x38.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-9-768x97.png 768w" sizes="(max-width: 969px) 100vw, 969px" /></figure>



<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>
</div></div>



<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh;aspect-ratio:unset;"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(90deg,rgb(64,224,208) 0%,rgb(255,140,0) 52%,rgb(255,0,0) 100%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-b21e835fbb6337f55d3411c29093a60f" style="font-size:20px"><strong>6. Calculate seasonal temperature anomalies for each year.</strong></h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">&quot;&quot;&quot;
The Seasonal temperature anomaly is calculated as the difference between the temperature for a 
given season of a certain yearn(TEMP_C in YearlySeason) and the corresponding Seosnal 
reference temperature (TEMP_AvSe column grouped51_80)
&quot;&quot;&quot;

#Choosing the same years
YearlySeason =  YearlySeason.loc[(YearlySeason[&quot;YEAR&quot;] &gt;= 1951) &amp; (YearlySeason[&quot;YEAR&quot;] &lt;= 1980)]

# Make a table join between YearlySeason and grouped51_80 to calcualte the anomalis 
SeaonalAnom = YearlySeason.merge(grouped51_80, on=&quot;SEASON&quot;)

# Finding the anamolies by calculating the difference between YearlySeason from grouped51_80 in anew column ANOMALY
SeaonalAnom[&quot;ANOMALY&quot;] = SeaonalAnom[&quot;TEMP_YearlyS&quot;] - SeaonalAnom[&quot;TEMP_AvSe&quot;]</pre></div>



<hr class="wp-block-separator has-text-color has-black-color has-alpha-channel-opacity has-black-background-color has-background is-style-wide"/>
</div></div>



<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh;aspect-ratio:unset;"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(90deg,rgb(75,19,79) 50%,rgb(35,74,20) 50%,rgb(255,239,186) 50%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p style="font-size:20px"><strong>7. Plotting the data</strong> </p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">&quot;&quot;&quot;
Dividing the SeaonalAnom data to four parts [Winter, Spring, Summer, Autumn] for ploting
&quot;&quot;&quot;
Winter = SeaonalAnom[SeaonalAnom[&quot;SEASON&quot;] == &quot;Winter&quot;]

Spring = SeaonalAnom[SeaonalAnom[&quot;SEASON&quot;] == &quot;Spring&quot;]

Summer= SeaonalAnom[SeaonalAnom[&quot;SEASON&quot;] == &quot;Summer&quot;]

Autumn = SeaonalAnom[SeaonalAnom[&quot;SEASON&quot;] == &quot;Autumn&quot;]</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Testing the result
Winter.head()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="961" height="324" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-10.png" alt="" class="wp-image-1270" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-10.png 961w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-10-300x101.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-10-768x259.png 768w" sizes="(max-width: 961px) 100vw, 961px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Create the figure and subplot axes
fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))

# Define variables to easily refer to axes
ax11 = axs[0][0]
ax12 = axs[0][1]
ax21 = axs[1][0]
ax22 = axs[1][1]

# Set plot line width
line_width = 1.5

# Plot data

Winter.plot(
    y= &quot;ANOMALY&quot;,
    x= &quot;YEAR&quot;,
    ax=ax11,
    c=&quot;blue&quot;,
    xlim=[1951, 1980],
    ylabel = &quot;Temperature Anomly&quot;,
    xlabel= &quot;Year&quot;,
    grid= True,
    lw=line_width
)


Spring.plot(
    y= &quot;ANOMALY&quot;,
    x= &quot;YEAR&quot;,
    ax=ax12,
    c=&quot;g&quot;,
     grid= True,
    xlabel= &quot;Year&quot;,
    xlim=[1951, 1980],
    lw=line_width
)

Summer.plot(
    ax=ax21,
    y= &quot;ANOMALY&quot;,
    x= &quot;YEAR&quot;,
    ylabel = &quot;Temperature Anomly&quot;,
    xlabel= &quot;Year&quot;,
    c=&quot;r&quot;,
    grid= True,
    xlim=[1951, 1980],
    lw=line_width
)

Autumn.plot(
    ax=ax22,
    y= &quot;ANOMALY&quot;,
    x= &quot;YEAR&quot;,
    xlabel= &quot;Year&quot;,
    c=&quot;#964B00&quot;,
    grid= True,
    xlim=[1951, 1980],
    lw=line_width
)

# Subplot Title 
fig.suptitle(&quot;1951-1980 Seasonal anomalies&quot;)

#Adding text to plots
ax11.text(1961.5, 4, &quot;Winter&quot;, c=&quot;b&quot;, fontsize= 20)
ax12.text(1957, -2.5, &quot;Spring&quot;, c=&quot;g&quot;, fontsize= 20)
ax21.text(1961.5, 1, &quot;Summer&quot;, c=&quot;r&quot;, fontsize= 20)
ax22.text(1957, -2.5, &quot;Autumn&quot;, c=&quot;#964B00&quot;, fontsize= 20)

plt.show()</pre></div>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="683" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/FinalExcersise-1024x683.png" alt="" class="wp-image-1272" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/FinalExcersise-1024x683.png 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/FinalExcersise-300x200.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/FinalExcersise-768x512.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/FinalExcersise.png 1200w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>
</div></div>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//seasonal-weather-anomalies-of-using-pandas-sodankyla-weather-station-in-northern-finland/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>N&#8217;Djamena Location Map</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//ndjamena-location-map/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//ndjamena-location-map/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Sat, 05 Oct 2024 17:01:52 +0000</pubDate>
				<category><![CDATA[Location Map]]></category>
		<category><![CDATA[QGIS]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1233</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:4vw;padding-right:4vw;padding-bottom:4vw;padding-left:4vw"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(90deg,rgb(0,159,255) 0%,rgb(236,47,75) 100%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<div class="wp-block-group is-content-justification-left is-layout-flex wp-container-core-group-is-layout-2 wp-block-group-is-layout-flex">
<figure class="wp-block-image size-large is-resized wp-container-content-1"><img loading="lazy" decoding="async" width="1024" height="780" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Layout_300dpi-1024x780.jpg" alt="" class="wp-image-912" style="width:798px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Layout_300dpi-1024x780.jpg 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Layout_300dpi-300x229.jpg 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Layout_300dpi-768x585.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Layout_300dpi-1536x1170.jpg 1536w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Layout_300dpi-2048x1560.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<div class="wp-block-group alignwide wp-container-content-2 is-content-justification-left"><div class="wp-block-group__inner-container is-layout-constrained wp-container-core-group-is-layout-1 wp-block-group-is-layout-constrained">
<div style="height:24px" aria-hidden="true" class="wp-block-spacer"></div>



<p class="has-text-align-left has-black-color has-text-color" style="font-size:18px;font-style:italic;font-weight:600">Data source: Natural Earth, Google Imagery. BaseMap: Stamen Watercolor.</p>
</div></div>
</div>
</div></div>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//ndjamena-location-map/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>LULC classification Using GEE and CART</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//lulc-classification-using-gee-and-cart/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//lulc-classification-using-gee-and-cart/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 20 Mar 2023 17:53:16 +0000</pubDate>
				<category><![CDATA[CART]]></category>
		<category><![CDATA[Environmental Monitoring]]></category>
		<category><![CDATA[GEE]]></category>
		<category><![CDATA[Google Earth Engine]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Land Cover & Land Use]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1237</guid>

					<description><![CDATA[Google Earth Engine (GEE), Code Editor, JavaScript (JS), and GEE data catalog to detect and analyze changes that occurred in Umbadaha between 1985 and 2022 by classifying the Land Cover and Land Use (LCLU) of Umbadaha, which is an Administrative Unit in Khartoum state, Sudan. This was done to differentiate between the LCLU in the [&#8230;]]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center has-background" style="background-color:#f1f5c7;grid-template-columns:auto 47%"><div class="wp-block-media-text__content">
<figure class="wp-block-image size-large is-resized"><img loading="lazy" decoding="async" width="721" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L5LULC_output-721x1024.jpg" alt="" class="wp-image-1239" style="width:492px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L5LULC_output-721x1024.jpg 721w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L5LULC_output-211x300.jpg 211w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L5LULC_output-768x1090.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L5LULC_output-1082x1536.jpg 1082w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L5LULC_output.jpg 1165w" sizes="(max-width: 721px) 100vw, 721px" /></figure>
</div><figure class="wp-block-media-text__media"><img loading="lazy" decoding="async" width="1024" height="438" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/1985ee-chart-1024x438.png" alt="" class="wp-image-1240 size-full" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/1985ee-chart-1024x438.png 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/1985ee-chart-300x128.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/1985ee-chart-768x328.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/1985ee-chart.png 1326w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<div class="wp-block-media-text alignwide has-media-on-the-right is-stacked-on-mobile is-vertically-aligned-center has-background" style="background-color:#f1f5c7;grid-template-columns:auto 47%"><div class="wp-block-media-text__content">
<figure class="wp-block-image size-large is-resized"><img loading="lazy" decoding="async" width="1024" height="438" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/2022ee-chart-1024x438.png" alt="" class="wp-image-1242" style="width:492px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/2022ee-chart-1024x438.png 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/2022ee-chart-300x128.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/2022ee-chart-768x328.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/2022ee-chart.png 1326w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>
</div><figure class="wp-block-media-text__media"><img loading="lazy" decoding="async" width="721" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L8LULC_output-721x1024.jpg" alt="" class="wp-image-922 size-full" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L8LULC_output-721x1024.jpg 721w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L8LULC_output-211x300.jpg 211w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L8LULC_output-768x1090.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L8LULC_output-1082x1536.jpg 1082w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/L8LULC_output.jpg 1165w" sizes="(max-width: 721px) 100vw, 721px" /></figure></div>



<p class="has-black-color has-text-color has-link-color wp-elements-2bdcaffdfc5f533d4a2d5c9bdf0101dd" style="font-size:17px"><a></a>Google Earth Engine (GEE), Code Editor, JavaScript (JS), and GEE data catalog to detect and analyze changes that occurred in Umbadaha between 1985 and 2022 by classifying the Land Cover and Land Use (LCLU) of Umbadaha, which is an Administrative Unit in Khartoum state, Sudan. This was done to differentiate between the LCLU in the area for the years 1985 &amp; 2022, using the Landsat 5 MSS image for the year 1985 and the Landsat 8 OLI image for 2022. This Landsat data was filtered by date to the year and by Cloud percentage of the scene to get a result of an image bounded by the Region of Interest (ROI), which in this cas is the Umbadah Locality polygon.</p>



<ul class="wp-block-list has-black-color has-text-color has-link-color wp-elements-86833917acc806060877a9e78499f37e">
<li class="has-black-color has-text-color has-link-color wp-elements-163dbe5a5e870f20572d7f4ffe600e29" style="font-size:17px">Umbadah area in km2: 3481 km2</li>
</ul>



<p class="has-black-color has-text-color has-link-color wp-elements-1804fd22e966371a30003c99c5d4d8fa" style="font-size:17px">The project aimed to identify six main classes/types of LCLU: Water, Agricultural, urban, Industrial, Rangeland, and BarrenLand. However, due to the arid nature of the area under study, the class for water bodies ‘Water’ wasn’t used in the classification of the two images. Also, the image of the year 1985 didn’t contain any Industrial location in the study area.</p>



<p class="has-black-color has-text-color has-link-color wp-elements-77df002028a5dc80a9f2333998b6f931" style="font-size:17px">The Classification code is written in JavaScript in the Earth Engine Code Editor. The same code was used for both the 1985 and 2022 images; only the dataset source of the Landsat image was changed. Also, the GCPs for each image are different due to the diversity of the two images.</p>



<p class="has-black-color has-text-color has-link-color wp-elements-ed8e5e1983d2d530ef54ac897af83a6e" style="font-size:17px">In General, the classification result showed that Barren lands dominate the area and lack any water bodies. In the years between 1985 and 2022, significant growth in urban areas happened, leading to an 850% increase in Residential areas. Although there weren’t any Industrial areas in 1985, this changed drastically in 2022. This can also be said for Agricultural lands. The presence of Grazing lands in the area is restricted to seasonal rivers (wadies).</p>



<p class="has-black-color has-text-color has-link-color wp-elements-5e7b40981980613e64356a512b45ef6a" style="font-size:20px"><strong>Landsat 8</strong></p>



<p class="has-black-color has-text-color has-link-color wp-elements-9850f13623476a675694b873fe3677bd" style="font-size:17px">The Landsat dataset used was for the period between 2022-01-01 to 2022-12-31</p>



<figure style="font-size:17px" class="wp-block-table"><table class="has-black-color has-text-color has-link-color has-fixed-layout"><tbody><tr><td>Class</td><td>Area in Km2</td></tr><tr><td>Agricultural</td><td>404.53</td></tr><tr><td>Urban</td><td>281.89</td></tr><tr><td>Industrial</td><td>11.14</td></tr><tr><td>Rangeland</td><td>83.88</td></tr><tr><td>BarrenLand</td><td>2687.26</td></tr></tbody></table></figure>



<p class="has-black-color has-text-color has-link-color wp-elements-881326a17912465c6bef23a4937cfd9b" style="font-size:20px"><strong>Landsat 5</strong></p>



<p class="has-black-color has-text-color has-link-color wp-elements-f34640fe1892f2609e38d95db1c1c2f0" style="font-size:17px">When we tried to classify the LULC using Landsat 5 images for the period between (1985-01-12 to 1985-12-31), we found that  the Umbadah Area was mainly Barren Land without any significant Agricultural or Grazing lands and no Industrial land.</p>



<figure style="font-size:17px" class="wp-block-table"><table class="has-black-color has-text-color has-link-color has-fixed-layout"><tbody><tr><td>Class</td><td>Area in Km2</td></tr><tr><td>Agricultural</td><td>2.20</td></tr><tr><td>Urban</td><td>33.34</td></tr><tr><td>Rangeland</td><td>333.11</td></tr><tr><td>Barren Land</td><td>3100.05</td></tr></tbody></table></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//lulc-classification-using-gee-and-cart/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Gash Risk Map</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//gash-risk-map/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//gash-risk-map/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Sun, 19 Feb 2023 16:56:42 +0000</pubDate>
				<category><![CDATA[ArcMap]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1228</guid>

					<description><![CDATA[The steps done to achieve this were as follows:]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-media-text alignfull is-stacked-on-mobile is-vertically-aligned-center"><figure class="wp-block-media-text__media"><img loading="lazy" decoding="async" width="721" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-721x1024.jpg" alt="" class="wp-image-918 size-full" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-721x1024.jpg 721w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-211x300.jpg 211w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-768x1090.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-1082x1536.jpg 1082w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01.jpg 1165w" sizes="(max-width: 721px) 100vw, 721px" /></figure><div class="wp-block-media-text__content">
<h3 class="wp-block-heading has-text-align-center has-text-color has-medium-font-size" style="color:#000000">In response to persistent disease outbreaks resulting from the Gash River floods in Kassala State, the state government undertook a risk assessment of the affected area and subsequently implemented a plan to develop an evacuation strategy. As part of this effort, a risk map was generated to identify and quantify vulnerable communities located within three distinct zones along the river: 1 km, 1.5 km, and 2.5 km from the riverbank. This map served as the basis for estimating the population residing within each zone and calculating the corresponding evacuation costs.</h3>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" width="555" height="110" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/pop.png" alt="" class="wp-image-1230" style="width:691px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/pop.png 555w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/pop-300x59.png 300w" sizes="(max-width: 555px) 100vw, 555px" /></figure>
</div></div>



<p class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-9fe10d84d5a75bdfc50e272eefe43fe3">The steps done to achieve this were as follows:</p>



<ul class="wp-block-list">
<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-2730384b9e89cd3925a37f70ff60617e">Using the join data tool in the attribute table, the Kassala_Settlements shapefile was joined to the table Kassala_population based on a common field.</li>



<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-b629e9068ee4d54664c548b42b1961c4">With the Kassala_rivers polyline shapefile, three buffer zones (polygon shapefiles) representing the vulnerable zones were created, with distances of 1km, 1.5km, and 2.5 km.</li>



<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-208dd62bf751675fbed78412a64e1c4c">Via selection by location, using the resulting layer of the join in the first step as a target layer, Kassala_rivers as a source layer, and using “are within a distance of the source layer feature” as a spatial selection method, the affected settlement points were identified at distances of 1km, 1.5km, and 2.5km.</li>



<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-a150549391f37ffdf4534887bae4bfaa">By multiplying each field [pop_men &#8211; Pop-women &#8211; Child_by- Child_girl] with the appropriate cost, and adding the result, the total cost of each town/village point was calculated. The total cost of the zones was calculated by adding the resulting towns/villages&#8217; total cost that is within the same distance of Gash River acquired by the previous step, for 1km (High-Risk Zone). 1.5km (Medium Risk zone) and 2.5km (Least risk zone). This step was done using Excel Sheets.</li>
</ul>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" width="565" height="95" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/cost.png" alt="" class="wp-image-1231" style="width:840px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/cost.png 565w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/cost-300x50.png 300w" sizes="(max-width: 565px) 100vw, 565px" /></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//gash-risk-map/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using ArcGIS Pro</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//first-time-using-arcgis-pro/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//first-time-using-arcgis-pro/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Sun, 04 Dec 2022 15:37:19 +0000</pubDate>
				<category><![CDATA[ArcGIS Pro]]></category>
		<category><![CDATA[Environmental Monitoring]]></category>
		<category><![CDATA[Hydrology]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1210</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-group has-background is-content-justification-left is-nowrap is-layout-flex wp-container-core-group-is-layout-3 wp-block-group-is-layout-flex" style="background:linear-gradient(135deg,rgb(33,95,0) 0%,rgb(228,228,217) 100%)">
<figure class="wp-block-image size-large is-resized"><img loading="lazy" decoding="async" width="791" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-791x1024.jpg" alt="" class="wp-image-895" style="width:347px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-791x1024.jpg 791w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-232x300.jpg 232w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-768x994.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-1187x1536.jpg 1187w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-1583x2048.jpg 1583w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Wildfire-Impacted-Area-Assignment-scaled.jpg 1978w" sizes="(max-width: 791px) 100vw, 791px" /></figure>



<figure class="wp-block-image size-large is-resized wp-container-content-3"><img loading="lazy" decoding="async" width="1024" height="791" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Navarro-Landscape-Layout-1024x791.jpg" alt="" class="wp-image-894" style="width:432px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Navarro-Landscape-Layout-1024x791.jpg 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Navarro-Landscape-Layout-300x232.jpg 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Navarro-Landscape-Layout-768x593.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Navarro-Landscape-Layout-1536x1187.jpg 1536w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Navarro-Landscape-Layout-2048x1583.jpg 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p></p>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//first-time-using-arcgis-pro/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Gadaref Geology Map</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//gadaref-geology-map/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//gadaref-geology-map/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Thu, 17 Nov 2022 16:35:29 +0000</pubDate>
				<category><![CDATA[QGIS]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1225</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh;aspect-ratio:unset;"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(90deg,rgb(102,255,0) 0%,rgb(168,0,119) 100%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<div class="wp-block-group wp-container-content-4"><div class="wp-block-group__inner-container is-layout-constrained wp-container-core-group-is-layout-4 wp-block-group-is-layout-constrained">
<div style="height:0px" aria-hidden="true" class="wp-block-spacer"></div>



<figure class="wp-block-image size-large is-style-default wp-duotone-unset-2"><img loading="lazy" decoding="async" width="724" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-724x1024.jpg" alt="" class="wp-image-924" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-724x1024.jpg 724w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-212x300.jpg 212w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-768x1086.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-1086x1536.jpg 1086w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-1448x2048.jpg 1448w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Gadarif_Vectorization-scaled.jpg 1810w" sizes="(max-width: 724px) 100vw, 724px" /></figure>



<div style="height:48px" aria-hidden="true" class="wp-block-spacer"></div>



<h2 class="wp-block-heading alignwide has-text-align-center has-white-color has-text-color" style="padding-left:32px;font-size:50px;font-style:normal;font-weight:400;letter-spacing:32px;line-height:1;text-transform:uppercase">Gadaref Geology</h2>



<details class="wp-block-details has-black-color has-text-color has-link-color has-medium-font-size wp-elements-9f62e399dd7ec31cf9c1a3917edd18f9 is-layout-flow wp-block-details-is-layout-flow" style="font-style:normal;font-weight:700"><summary>Data derived from a digitized version of a scanned map</summary>
<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>
</details>
</div></div>
</div></div>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//gadaref-geology-map/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
