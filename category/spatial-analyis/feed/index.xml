<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Spatial Analyis &#8211; Mohammed I. Mukhtar</title>
	<atom:link href="https://triplem45.github.io/M.I.Mukhtat//category/spatial-analyis/feed/" rel="self" type="application/rss+xml" />
	<link>https://triplem45.github.io/M.I.Mukhtat/</link>
	<description>GIS Portfolio</description>
	<lastBuildDate>Mon, 23 Dec 2024 17:15:11 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.7.1</generator>

<image>
	<url>https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/9II7hq-LogoMakr-e1734941260861.png</url>
	<title>Spatial Analyis &#8211; Mohammed I. Mukhtar</title>
	<link>https://triplem45.github.io/M.I.Mukhtat/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Calculate and visualise the dominance areas of shopping centres &#8211; Python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//calculate-and-visualise-the-dominance-areas-of-shopping-centres-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//calculate-and-visualise-the-dominance-areas-of-shopping-centres-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 23 Dec 2024 17:04:13 +0000</pubDate>
				<category><![CDATA[Data Analysis]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1402</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw;min-height:66vh;aspect-ratio:unset;"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(90deg,rgb(2,3,129) 47%,rgb(40,116,252) 47%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p class="has-text-align-center has-white-color has-text-color has-link-color has-medium-font-size wp-elements-fc6c23aae8a55540b5ad80202108e6e6">The aim is to delineate the dominance area of each shopping centre. </p>



<p>For this exercise, we define the ‘dominance area’ of a shopping centre as the area from which it can be reached faster than other shopping centres, using public transport travel times.</p>



<p>This task comprises of three major subtasks</p>



<ul class="wp-block-list">
<li class="has-white-color has-text-color has-link-color wp-elements-8fd6e85f0501ee6384ed47e221543d31">Loading the YKR grid and the individual travel time data sets and combining them into one geo data frame. </li>



<li class="has-white-color has-text-color has-link-color wp-elements-f6f76b3c97c9e93aee77a4c3920a3dfd">Finding the closest shopping centre to each grid cell. Using the minimum travel time to any of the shopping centres, </li>



<li class="has-white-color has-text-color has-link-color wp-elements-f7b057642d66274ab4b66d42f3dbc766">Visualising the dominance areas and travel times, using 2⨉1 subplots to plot the most dominant (closest) shopping centre for each grid cell, and the travel time to the closest shopping centre for each grid cell.</li>
</ul>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import pandas as pd
import geopandas as gpd
import mapclassify
import matplotlib.pyplot as plt

import pathlib 
NOTEBOOK_PATH = pathlib.Path().resolve()
DATA_DIRECTORY = NOTEBOOK_PATH / &quot;data&quot;</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">#Import the YKR grid and Set the &quot;YKR_ID&quot; column as index
grid = gpd.read_file(DATA_DIRECTORY / &quot;YKR_grid_EPSG3067.gpkg&quot;)
grid = grid.set_index(&quot;YKR_ID&quot;)</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Import the shpping centres data 
Itis = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5944003_Itis.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )


Myyrmanni = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5902043_Myyrmanni.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Jumbo = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5878070_Jumbo.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Dixii = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5878087_Dixi.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Forum = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5975373_Forum.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Iso_Omena = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5978593_Iso_Omena.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )

Ruoholahti = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5980260_Ruoholahti.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;],
    index_col=&quot;from_id&quot;
    )</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Join data and add suffix name to doupled column names
all_data = Itis.add_suffix(&quot;_Itis&quot;).join(
    Myyrmanni.add_suffix(&quot;_Myyrmanni&quot;)
).join(Jumbo.add_suffix(&quot;_Jumbo&quot;)
      ).join(
    Dixii.add_suffix(&quot;_Dixii&quot;)
).join(
    Forum.add_suffix(&quot;_Forum&quot;)
).join(
    Iso_Omena.add_suffix(&quot;_Iso_Omena&quot;)
).join(
    Ruoholahti.add_suffix(&quot;_Ruoholahti&quot;)
)
grid = grid.join(all_data)
</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">grid[&quot;min_tr_t&quot;] = grid[[&quot;pt_r_t_Itis&quot;, &quot;pt_r_t_Myyrmanni&quot;, &quot;pt_r_t_Jumbo&quot;, &quot;pt_r_t_Dixii&quot;, &quot;pt_r_t_Forum&quot;, &quot;pt_r_t_Iso_Omena&quot;, &quot;pt_r_t_Ruoholahti&quot;]].min(axis=1)
grid[&quot;closest_ShoppingCentre&quot;] = grid[[&quot;pt_r_t_Itis&quot;, &quot;pt_r_t_Myyrmanni&quot;, &quot;pt_r_t_Jumbo&quot;, &quot;pt_r_t_Dixii&quot;, &quot;pt_r_t_Forum&quot;, &quot;pt_r_t_Iso_Omena&quot;, &quot;pt_r_t_Ruoholahti&quot;]].idxmin(axis=1).astype(str)

grid[&quot;closest_ShoppingCentre&quot;] = grid[&quot;closest_ShoppingCentre&quot;].apply(
    lambda value : value[7:]
)</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 15), facecolor=&quot;lightgrey&quot;)


ax1.set_title(&quot;Areas of dominance of shopping centres&quot;)
ax2.set_title(&quot;Travel time to the closest shopping centre&quot;)

grid.plot(
    column=&quot;closest_ShoppingCentre&quot;,
    ax=ax1,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0,
    legend=True
)

grid.plot(
    column=&quot;min_tr_t&quot;,
    ax=ax2,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

plt.savefig(DATA_DIRECTORY / &quot;dominance_areas.png&quot;)</pre></div>



<figure class="wp-block-image size-full"><img fetchpriority="high" decoding="async" width="1000" height="500" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px.png" alt="" class="wp-image-1403" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px.png 1000w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px-300x150.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/dominance_areas_example_1000x500px-768x384.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure>
</div></div>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//calculate-and-visualise-the-dominance-areas-of-shopping-centres-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Joining accessibility datasets into a grid and visualising the data on a map using Python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//joining-accessibility-datasets-into-a-grid-and-visualising-the-data-on-a-map-using-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//joining-accessibility-datasets-into-a-grid-and-visualising-the-data-on-a-map-using-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 09 Dec 2024 16:51:03 +0000</pubDate>
				<category><![CDATA[Data Analysis]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1392</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-cover alignfull" style="margin-top:0;padding-top:5vw;padding-right:5vw;padding-bottom:5vw;padding-left:5vw"><span aria-hidden="true" class="wp-block-cover__background has-background-dim-100 has-background-dim has-background-gradient" style="background:linear-gradient(180deg,rgb(21,87,153) 0%,rgb(21,153,87) 100%)"></span><div class="wp-block-cover__inner-container is-layout-flow wp-block-cover-is-layout-flow">
<p>This exercise, part of the Master&#8217;s in GIS curriculum at the University of Helsinki, combines non-spatial data (travel times) with spatial data (grid cells representing locations) to visualize travel times to two shopping centers within the Helsinki metropolitan area. The goal is to integrate these datasets and generate a map showing travel times from every location in the grid to each shopping center.</p>



<p>In particular, this task comprises of three major steps:</p>



<ul class="wp-block-list">
<li class="has-white-color has-text-color has-link-color wp-elements-cf90ddb50ad04afafed638711d23d96c">Reading the grid cell data set</li>



<li class="has-white-color has-text-color has-link-color wp-elements-c2339dd58cb79bc00759ffc577f06461">Reading travel time data set,</li>



<li class="has-white-color has-text-color has-link-color wp-elements-d4a1a17a1967c3482bdb1281c2d43180">Classifying the travel times for both travel modes (public transport and private car) into five-minute intervals</li>
</ul>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-193b485d305cba77607ddc07f7a095ae">1. <strong>Reading the grid cell data set</strong></h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import pathlib 
NOTEBOOK_PATH = pathlib.Path().resolve()
DATA_DIRECTORY = NOTEBOOK_PATH / &quot;data&quot;

import pandas as pd
import geopandas as gpd</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">grid = gpd.read_file(DATA_DIRECTORY / &quot;YKR_grid_EPSG3067.gpkg&quot;)
grid = grid.set_index(&quot;YKR_ID&quot;)
grid.head()</pre></div>



<figure class="wp-block-image size-full"><img decoding="async" width="921" height="220" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13.png" alt="" class="wp-image-1396" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13.png 921w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13-300x72.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-13-768x183.png 768w" sizes="(max-width: 921px) 100vw, 921px" /></figure>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-1dd0e94a79fb67a636eb57c50fc6f3bc">2. Reading the travel time data sets and join them to the grid cells </h2>



<p>Inside the&nbsp;data&nbsp;directory, a set of semicolon-separated text files with travel times to each of a set of shopping centres in the Helsinki region</p>



<p>The individual files have file names following the schema&nbsp;travel_times_to_[XXXXX]_[Shopping_Centre], where&nbsp;[Shopping_Centre]&nbsp;is the name of one of the seven shopping centres included in the data set, and&nbsp;[XXXXX], coincidently, referring to the YKR grid cell in which the shopping centre is located</p>



<p>The data sets contain computed travel times between different places in the metropolitan area. In order to produce such a&nbsp;<em>travel time matrix</em>, all connections from all origins to all destinations are calculated, and then recorded in a table.</p>



<p><strong>Columns</strong></p>



<p>The data sets we use have many&nbsp;<strong>columns</strong>, but only a few are interesting for this task:</p>



<ul class="wp-block-list">
<li class="has-white-color has-text-color has-link-color wp-elements-2b26e1708931dc0787d918eaa8c0793f">from_id: the YKR_ID of the <em>origin</em> grid cell</li>



<li class="has-white-color has-text-color has-link-color wp-elements-0a8925baf206f347d5b2fce4c6140540">to_id: refers to the YKR_ID of the <em>destination</em> grid cell (here: the one containing the shopping centre).</li>



<li class="has-white-color has-text-color has-link-color wp-elements-5c31f15c6fd6e253129af7cd251e8091">pt_r_t: how long does it take to travel from from_id to to_id, in minutes, using public transport</li>



<li class="has-white-color has-text-color has-link-color wp-elements-e57d582fba15a78abd9bc37341af8454">car_r_t: how long does it take to drive a car from from_id to to_id, in minutes</li>
</ul>



<p class="has-black-color has-text-color has-link-color wp-elements-809841e9a6bc832d5d295f2558c9168a"><strong>The next code is to read the data sets for the shopping centres ‘Itis’ and ‘Myyrmanni’, discard irrelevant columns, rename the pt_r_t and car_r_t columns to include a reference to the shopping centre (e.g., into pt_r_t_Itis), and join the renamed columns to the grid data frame. Don’t forget to replace no-data values (-1) with None</strong></p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">Itis = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5944003_Itis.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;, &quot;car_r_t&quot;],
    index_col=&quot;from_id&quot;
    ).rename(columns={&quot;pt_r_t&quot;:&quot;pt_r_t_Itis&quot;, &quot;car_r_t&quot;:&quot;car_r_t_Itis&quot;, &quot;to_id&quot;:&quot;to_id_Itis&quot;})


Myyrmanni = pd.read_csv(
    DATA_DIRECTORY / &quot;travel_times_to_5902043_Myyrmanni.txt&quot;, 
    sep=&quot;;&quot;,
    na_values=-1,
    usecols=[&quot;from_id&quot;, &quot;to_id&quot;, &quot;pt_r_t&quot;, &quot;car_r_t&quot;],
    index_col=&quot;from_id&quot;
    )</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">grid = grid.join(Itis).join(Myyrmanni.add_suffix(&quot;_Myyrmanni&quot;))
grid.head()</pre></div>



<figure class="wp-block-image size-full"><img decoding="async" width="928" height="300" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14.png" alt="" class="wp-image-1397" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14.png 928w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14-300x97.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-14-768x248.png 768w" sizes="(max-width: 928px) 100vw, 928px" /></figure>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-5341f3df6d13c47a2375791619d9cefe">3. Classifying the travel times into five-minute intervals</h2>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import mapclassify
&quot;&quot;&quot;
Create a mapclassify.UserDefined classifier, using these class breaks:
                                        5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60
&quot;&quot;&quot;
bins =[5, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0]
# for Itis
classifier1 = mapclassify.UserDefined(
    y=grid[&quot;pt_r_t_Itis&quot;], 
    bins=bins
)

# for Myyrmanni
classifier2 = mapclassify.UserDefined(
    y=grid[&quot;car_r_t_Myyrmanni&quot;], 
    bins=bins
)

classifier3 = mapclassify.UserDefined(
    y=grid[&quot;car_r_t_Itis&quot;], 
    bins=bins
)

classifier4 = mapclassify.UserDefined(
    y=grid[&quot;pt_r_t_Myyrmanni&quot;], 
    bins=bins
)

&quot;&quot;&quot;
Apply the classifier to pt_r_t_[ShoppingCentre] and car_r_t_[ShoppingCentre] columns, 
and store the results to pt_r_t_cl_[ShoppingCentre] and car_r_t_cl_[ShoppingCentre] columns, respectively
&quot;&quot;&quot;

#yb: Short for “yielded bins,” this attribute contains the class index for each data value
grid[&quot;pt_r_t_cl_Itis&quot;] =  classifier1.yb

grid[&quot;car_r_t_cl_Myyrmanni&quot;] = classifier2.yb

grid[&quot;car_r_t_cl_Itis&quot;] =  classifier3.yb

grid[&quot;pt_r_t_cl_Myyrmanni&quot;] =  classifier4.yb</pre></div>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Check the output for Itis
print(&quot;travel times by public transport:&quot;)
grid[['pt_r_t_Itis', 'pt_r_t_cl_Itis']].head()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="921" height="231" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15.png" alt="" class="wp-image-1398" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15.png 921w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15-300x75.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-15-768x193.png 768w" sizes="(max-width: 921px) 100vw, 921px" /></figure>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;disableCopy&quot;:true,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}"># Check the output for Myyrmanni
print(&quot;Travel times by car:&quot;)
grid[[&quot;car_r_t_Myyrmanni&quot;, &quot;car_r_t_cl_Myyrmanni&quot;]].head()</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="925" height="240" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16.png" alt="" class="wp-image-1399" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16.png 925w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16-300x78.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/image-16-768x199.png 768w" sizes="(max-width: 925px) 100vw, 925px" /></figure>



<h2 class="wp-block-heading has-black-color has-text-color has-link-color wp-elements-44d9283c68059f61d417bf5b76e9d64e">4. Ploting the classified travel times</h2>



<p>Creating a 2⨉2 plot, to plot the <em>classified</em> travel times by public transport (left) and by car (right), to Itis (top) and Myyrmanni (bottom)</p>



<div class="wp-block-codemirror-blocks-code-block code-block"><pre class="CodeMirror" data-setting="{&quot;showPanel&quot;:true,&quot;languageLabel&quot;:&quot;language&quot;,&quot;fullScreenButton&quot;:true,&quot;copyButton&quot;:false,&quot;mode&quot;:&quot;python&quot;,&quot;mime&quot;:&quot;text/x-python&quot;,&quot;theme&quot;:&quot;material&quot;,&quot;lineNumbers&quot;:false,&quot;styleActiveLine&quot;:false,&quot;lineWrapping&quot;:false,&quot;readOnly&quot;:true,&quot;fileName&quot;:&quot;Python&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;maxHeight&quot;:&quot;400px&quot;,&quot;modeName&quot;:&quot;python&quot;}">import matplotlib.pyplot as plt

# Creating subplots using matplotlib.pyplot.subplots(), 
#with 2 rows and 2 columns. Increase the figure size to 10⨉10&quot;
fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))

#title
fig.suptitle('Travel times by public transport (PT) and car to Itis and Myyrmanni')

# Defining variables to more easily refer to individual axes
ax11 = axs[0][0]
ax12 = axs[0][1]
ax21 = axs[1][0]
ax22 = axs[1][1]

#Adding appropriate titles for the subplots
ax11.set_title(&quot;Itis - Travel time by PT&quot;)
ax12.set_title(&quot;Itis - Travel time by Car&quot;)
ax21.set_title(&quot;Myyrmanni - Travel time by PT&quot;)   
ax22.set_title(&quot;Myyrmanni - Travel time by Car&quot;)

# Set plot line width
line_width = 1.5

# Plot data
grid.plot(
    column=&quot;pt_r_t_cl_Itis&quot;,
    ax=ax11,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

grid.plot(
    column=&quot;car_r_t_cl_Itis&quot;,
    ax=ax12,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

grid.plot(
    column=&quot;pt_r_t_cl_Myyrmanni&quot;,
    ax=ax21,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)

grid.plot(
    column=&quot;car_r_t_cl_Myyrmanni&quot;,
    ax=ax22,
    cmap=&quot;RdYlBu&quot;,
    linewidth=0
)
#Saving the figure to a file called shopping_centre_accessibility.png in the DATA_DIRECTORY
plt.savefig(DATA_DIRECTORY / &quot;shopping_centre_accessibility.png&quot;)</pre></div>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="720" height="720" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px.png" alt="" class="wp-image-1400" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px.png 720w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px-300x300.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px-150x150.png 150w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/travel_times_example_720x720px-600x600.png 600w" sizes="(max-width: 720px) 100vw, 720px" /></figure>
</div></div>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//joining-accessibility-datasets-into-a-grid-and-visualising-the-data-on-a-map-using-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Geospatial data manipulation with Python</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//geospatial-data-manipulation-with-python/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//geospatial-data-manipulation-with-python/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Mon, 18 Nov 2024 11:33:28 +0000</pubDate>
				<category><![CDATA[OSM]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<category><![CDATA[Spatial Analysis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1070</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-gallery has-nested-images columns-default is-cropped wp-block-gallery-1 is-layout-flex wp-block-gallery-is-layout-flex">
<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="760" data-id="902" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-1024x760.png" alt="" class="wp-image-902" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-1024x760.png 1024w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-300x223.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-768x570.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-1536x1140.png 1536w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/access_grid-2048x1521.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="906" height="1024" data-id="900" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-906x1024.png" alt="" class="wp-image-900" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-906x1024.png 906w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-265x300.png 265w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-768x868.png 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany-1358x1536.png 1358w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/Stuttgart-Mitte-Stuttgart-Germany.png 1804w" sizes="(max-width: 906px) 100vw, 906px" /></figure>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="796" height="798" data-id="899" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code.png" alt="" class="wp-image-899" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code.png 796w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code-300x300.png 300w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code-150x150.png 150w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/code-768x770.png 768w" sizes="(max-width: 796px) 100vw, 796px" /><figcaption class="wp-element-caption">The python code</figcaption></figure>
</figure>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//geospatial-data-manipulation-with-python/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Gash Risk Map</title>
		<link>https://triplem45.github.io/M.I.Mukhtat//gash-risk-map/</link>
					<comments>https://triplem45.github.io/M.I.Mukhtat//gash-risk-map/#respond</comments>
		
		<dc:creator><![CDATA[root]]></dc:creator>
		<pubDate>Sun, 19 Feb 2023 16:56:42 +0000</pubDate>
				<category><![CDATA[ArcMap]]></category>
		<category><![CDATA[Spatial Analyis]]></category>
		<guid isPermaLink="false">https://triplem45.github.io/M.I.Mukhtat//?p=1228</guid>

					<description><![CDATA[The steps done to achieve this were as follows:]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-media-text alignfull is-stacked-on-mobile is-vertically-aligned-center"><figure class="wp-block-media-text__media"><img loading="lazy" decoding="async" width="721" height="1024" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-721x1024.jpg" alt="" class="wp-image-918 size-full" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-721x1024.jpg 721w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-211x300.jpg 211w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-768x1090.jpg 768w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01-1082x1536.jpg 1082w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/ASSIGMNET_01.jpg 1165w" sizes="(max-width: 721px) 100vw, 721px" /></figure><div class="wp-block-media-text__content">
<h3 class="wp-block-heading has-text-align-center has-text-color has-medium-font-size" style="color:#000000">In response to persistent disease outbreaks resulting from the Gash River floods in Kassala State, the state government undertook a risk assessment of the affected area and subsequently implemented a plan to develop an evacuation strategy. As part of this effort, a risk map was generated to identify and quantify vulnerable communities located within three distinct zones along the river: 1 km, 1.5 km, and 2.5 km from the riverbank. This map served as the basis for estimating the population residing within each zone and calculating the corresponding evacuation costs.</h3>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" width="555" height="110" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/pop.png" alt="" class="wp-image-1230" style="width:691px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/pop.png 555w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/pop-300x59.png 300w" sizes="(max-width: 555px) 100vw, 555px" /></figure>
</div></div>



<p class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-9fe10d84d5a75bdfc50e272eefe43fe3">The steps done to achieve this were as follows:</p>



<ul class="wp-block-list">
<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-2730384b9e89cd3925a37f70ff60617e">Using the join data tool in the attribute table, the Kassala_Settlements shapefile was joined to the table Kassala_population based on a common field.</li>



<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-b629e9068ee4d54664c548b42b1961c4">With the Kassala_rivers polyline shapefile, three buffer zones (polygon shapefiles) representing the vulnerable zones were created, with distances of 1km, 1.5km, and 2.5 km.</li>



<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-208dd62bf751675fbed78412a64e1c4c">Via selection by location, using the resulting layer of the join in the first step as a target layer, Kassala_rivers as a source layer, and using “are within a distance of the source layer feature” as a spatial selection method, the affected settlement points were identified at distances of 1km, 1.5km, and 2.5km.</li>



<li class="has-black-color has-text-color has-link-color has-medium-font-size wp-elements-a150549391f37ffdf4534887bae4bfaa">By multiplying each field [pop_men &#8211; Pop-women &#8211; Child_by- Child_girl] with the appropriate cost, and adding the result, the total cost of each town/village point was calculated. The total cost of the zones was calculated by adding the resulting towns/villages&#8217; total cost that is within the same distance of Gash River acquired by the previous step, for 1km (High-Risk Zone). 1.5km (Medium Risk zone) and 2.5km (Least risk zone). This step was done using Excel Sheets.</li>
</ul>



<figure class="wp-block-image size-full is-resized"><img loading="lazy" decoding="async" width="565" height="95" src="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/cost.png" alt="" class="wp-image-1231" style="width:840px;height:auto" srcset="https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/cost.png 565w, https://triplem45.github.io/M.I.Mukhtat//wp-content/uploads/2024/12/cost-300x50.png 300w" sizes="(max-width: 565px) 100vw, 565px" /></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://triplem45.github.io/M.I.Mukhtat//gash-risk-map/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
